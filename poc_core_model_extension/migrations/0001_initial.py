# Generated by Django 3.2.19 on 2023-05-08 17:21

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.mixins
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dcim', '0019_device_redundancy_group_data_migration'),
        ('extras', '0058_jobresult_add_time_status_idxs'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('_custom_field_data', models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'ordering': ['name'],
            },
            bases=(models.Model, nautobot.extras.models.mixins.DynamicGroupMixin, nautobot.extras.models.mixins.NotesMixin),
        ),
        migrations.CreateModel(
            name='MyModelToDevice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('device', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='dcim.device')),
                ('mymodel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='poc_core_model_extension.mymodel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='mymodel',
            name='devices',
            field=models.ManyToManyField(blank=True, null=True, related_name='mymodel', through='poc_core_model_extension.MyModelToDevice', to='dcim.Device'),
        ),
        migrations.AddField(
            model_name='mymodel',
            name='tags',
            field=taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag'),
        ),
    ]
